╔═══════════════════════════════════════════════════════════╗
║           带记忆功能的AI对话系统 - 快速指南                ║
╚═══════════════════════════════════════════════════════════╝

【使用步骤】

第一步: 运行第一次对话
------------------------------------------------------------
命令: python app_first.py

功能:
  ✓ 创建新的AI对话
  ✓ 发送第一条消息: "I have 2 dogs in my house."
  ✓ 保存对话历史到 chat_history.json

第二步: 运行第二次对话
------------------------------------------------------------
命令: python app_second.py

功能:
  ✓ 从 chat_history.json 加载历史记忆
  ✓ 恢复AI的对话上下文
  ✓ 发送第二条消息: "How many paws are in my house?"
  ✓ AI能够记住第一次对话中提到的"2只狗"!

【核心文件说明】

app_first.py       → 第一次运行,创建对话并保存记忆
app_second.py      → 第二次运行,加载记忆并继续对话
chat_history.json  → 对话历史记录(自动生成)
app.py             → 原版文件(单次运行,无记忆)

【重要特性】

✅ 持久化记忆  - 对话历史保存在JSON文件中
✅ 完整上下文  - AI能记住之前所有对话
✅ 可视化查看  - 可以打开JSON文件查看记忆内容
✅ 灵活控制    - 删除JSON文件即可清空记忆

【常用操作】

清空记忆重新开始:
  rm chat_history.json
  python app_first.py

查看保存的记忆:
  cat chat_history.json

继续之前的对话:
  python app_second.py

【工作原理】

1. app_first.py 将对话保存为JSON格式
2. app_second.py 读取JSON文件并恢复对话上下文  
3. AI通过重新"阅读"历史消息来回忆起之前的内容
4. 新的对话会追加到历史记录中

【技术要点】

记忆保存:
  history = chat.get_history()
  json.dump(history_data, file)

记忆恢复:
  history_data = json.load(file)
  for msg in history_data:
      chat.send_message(msg["content"])

╔═══════════════════════════════════════════════════════════╗
║  现在你可以开始测试了! 先运行 app_first.py               ║
╚═══════════════════════════════════════════════════════════╝

